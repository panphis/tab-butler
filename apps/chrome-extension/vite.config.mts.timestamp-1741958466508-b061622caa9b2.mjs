// vite.config.mts
import { defineConfig } from "file:///Users/Shared/code/github/tab-butler/node_modules/.pnpm/vite@5.4.2_@types+node@22.5.0/node_modules/vite/dist/node/index.js";
import { resolve as resolve2 } from "path";
import libAssetsPlugin from "file:///Users/Shared/code/github/tab-butler/node_modules/.pnpm/@laynezh+vite-plugin-lib-assets@0.5.23/node_modules/@laynezh/vite-plugin-lib-assets/dist/index.js";

// utils/plugins/make-manifest-plugin.ts
import * as fs from "fs";
import * as path from "path";
import { ManifestParser, colorLog } from "file:///Users/Shared/code/github/tab-butler/packages/dev-utils/dist/index.js";
import { pathToFileURL } from "url";
import * as process from "process";
var __vite_injected_original_dirname = "/Users/Shared/code/github/tab-butler/apps/chrome-extension/utils/plugins";
var { resolve } = path;
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = () => {
  const withCacheBurst = (path2) => `${path2}?${Date.now().toString()}`;
  if (process.platform === "win32") {
    return import(withCacheBurst(pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifestPlugin(config) {
  function makeManifest(manifest, to) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    const isFirefox = process.env.__FIREFOX__ === "true";
    fs.writeFileSync(manifestPath, ManifestParser.convertManifestToString(manifest, isFirefox ? "firefox" : "chrome"));
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const outDir2 = config.outDir;
      const manifest = await getManifestWithCacheBurst();
      makeManifest(manifest.default, outDir2);
    }
  };
}

// vite.config.mts
import { watchPublicPlugin, watchRebuildPlugin } from "file:///Users/Shared/code/github/tab-butler/packages/hmr/dist/index.js";
import { isDev, isProduction, watchOption } from "file:///Users/Shared/code/github/tab-butler/packages/vite-config/index.mjs";
var __vite_injected_original_dirname2 = "/Users/Shared/code/github/tab-butler/apps/chrome-extension";
var rootDir2 = resolve2(__vite_injected_original_dirname2);
var outDir = resolve2(rootDir2, "..", "..", "dist");
var vite_config_default = defineConfig({
  resolve: {
    alias: {}
  },
  plugins: [
    libAssetsPlugin({
      outputPath: outDir
    }),
    watchPublicPlugin(),
    makeManifestPlugin({ outDir }),
    isDev && watchRebuildPlugin({ reload: true })
  ],
  publicDir: resolve2(rootDir2, "public"),
  build: {
    emptyOutDir: false,
    lib: {
      entry: [
        resolve2(__vite_injected_original_dirname2, "lib/background.ts"),
        resolve2(__vite_injected_original_dirname2, "lib/scriptCreateBookMark.ts"),
        resolve2(__vite_injected_original_dirname2, "lib/scriptCloseBookmark.ts")
      ]
    },
    outDir,
    sourcemap: isDev,
    minify: isProduction,
    reportCompressedSize: isProduction,
    watch: watchOption,
    rollupOptions: {
      external: ["chrome"]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIiwgInV0aWxzL3BsdWdpbnMvbWFrZS1tYW5pZmVzdC1wbHVnaW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvU2hhcmVkL2NvZGUvZ2l0aHViL3RhYi1idXRsZXIvYXBwcy9jaHJvbWUtZXh0ZW5zaW9uXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvU2hhcmVkL2NvZGUvZ2l0aHViL3RhYi1idXRsZXIvYXBwcy9jaHJvbWUtZXh0ZW5zaW9uL3ZpdGUuY29uZmlnLm10c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvU2hhcmVkL2NvZGUvZ2l0aHViL3RhYi1idXRsZXIvYXBwcy9jaHJvbWUtZXh0ZW5zaW9uL3ZpdGUuY29uZmlnLm10c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxpYkFzc2V0c1BsdWdpbiBmcm9tICdAbGF5bmV6aC92aXRlLXBsdWdpbi1saWItYXNzZXRzJztcbmltcG9ydCBtYWtlTWFuaWZlc3RQbHVnaW4gZnJvbSAnLi91dGlscy9wbHVnaW5zL21ha2UtbWFuaWZlc3QtcGx1Z2luJztcbmltcG9ydCB7IHdhdGNoUHVibGljUGx1Z2luLCB3YXRjaFJlYnVpbGRQbHVnaW4gfSBmcm9tICdAcmVwby9obXInO1xuaW1wb3J0IHsgaXNEZXYsIGlzUHJvZHVjdGlvbiwgd2F0Y2hPcHRpb24gfSBmcm9tICdAcmVwby92aXRlLWNvbmZpZyc7XG5cbmNvbnN0IHJvb3REaXIgPSByZXNvbHZlKF9fZGlybmFtZSk7XG5cbmNvbnN0IG91dERpciA9IHJlc29sdmUocm9vdERpciwgJy4uJywgJy4uJywgJ2Rpc3QnKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG5cdHJlc29sdmU6IHtcblx0XHRhbGlhczoge1xuXHRcdH0sXG5cdH0sXG5cdHBsdWdpbnM6IFtcblx0XHRsaWJBc3NldHNQbHVnaW4oe1xuXHRcdFx0b3V0cHV0UGF0aDogb3V0RGlyLFxuXHRcdH0pLFxuXHRcdHdhdGNoUHVibGljUGx1Z2luKCksXG5cdFx0bWFrZU1hbmlmZXN0UGx1Z2luKHsgb3V0RGlyIH0pLFxuXHRcdGlzRGV2ICYmIHdhdGNoUmVidWlsZFBsdWdpbih7IHJlbG9hZDogdHJ1ZSB9KSxcblx0XSxcblx0cHVibGljRGlyOiByZXNvbHZlKHJvb3REaXIsICdwdWJsaWMnKSxcblx0YnVpbGQ6IHtcblx0XHRlbXB0eU91dERpcjogZmFsc2UsXG5cdFx0bGliOiB7XG5cdFx0XHRlbnRyeTogW1xuXHRcdFx0XHRyZXNvbHZlKF9fZGlybmFtZSwgJ2xpYi9iYWNrZ3JvdW5kLnRzJyksXG5cdFx0XHRcdHJlc29sdmUoX19kaXJuYW1lLCAnbGliL3NjcmlwdENyZWF0ZUJvb2tNYXJrLnRzJyksXG5cdFx0XHRcdHJlc29sdmUoX19kaXJuYW1lLCAnbGliL3NjcmlwdENsb3NlQm9va21hcmsudHMnKVxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0b3V0RGlyLFxuXHRcdGVtcHR5T3V0RGlyOiBmYWxzZSxcblx0XHRzb3VyY2VtYXA6IGlzRGV2LFxuXHRcdG1pbmlmeTogaXNQcm9kdWN0aW9uLFxuXHRcdHJlcG9ydENvbXByZXNzZWRTaXplOiBpc1Byb2R1Y3Rpb24sXG5cdFx0d2F0Y2g6IHdhdGNoT3B0aW9uLFxuXHRcdHJvbGx1cE9wdGlvbnM6IHtcblx0XHRcdGV4dGVybmFsOiBbJ2Nocm9tZSddLFxuXHRcdH0sXG5cdH0sXG59KTtcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL1NoYXJlZC9jb2RlL2dpdGh1Yi90YWItYnV0bGVyL2FwcHMvY2hyb21lLWV4dGVuc2lvbi91dGlscy9wbHVnaW5zXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvU2hhcmVkL2NvZGUvZ2l0aHViL3RhYi1idXRsZXIvYXBwcy9jaHJvbWUtZXh0ZW5zaW9uL3V0aWxzL3BsdWdpbnMvbWFrZS1tYW5pZmVzdC1wbHVnaW4udHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL1NoYXJlZC9jb2RlL2dpdGh1Yi90YWItYnV0bGVyL2FwcHMvY2hyb21lLWV4dGVuc2lvbi91dGlscy9wbHVnaW5zL21ha2UtbWFuaWZlc3QtcGx1Z2luLnRzXCI7aW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IE1hbmlmZXN0UGFyc2VyLCBjb2xvckxvZyB9IGZyb20gJ0ByZXBvL2Rldi11dGlscyc7XG5pbXBvcnQgdHlwZSB7IFBsdWdpbk9wdGlvbiB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHsgcGF0aFRvRmlsZVVSTCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuXG5jb25zdCB7IHJlc29sdmUgfSA9IHBhdGg7XG5cbmNvbnN0IHJvb3REaXIgPSByZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJyk7XG5jb25zdCBtYW5pZmVzdEZpbGUgPSByZXNvbHZlKHJvb3REaXIsICdtYW5pZmVzdC5qcycpO1xuXG5jb25zdCBnZXRNYW5pZmVzdFdpdGhDYWNoZUJ1cnN0ID0gKCk6IFByb21pc2U8eyBkZWZhdWx0OiBjaHJvbWUucnVudGltZS5NYW5pZmVzdFYzIH0+ID0+IHtcbiAgY29uc3Qgd2l0aENhY2hlQnVyc3QgPSAocGF0aDogc3RyaW5nKSA9PiBgJHtwYXRofT8ke0RhdGUubm93KCkudG9TdHJpbmcoKX1gO1xuICAvKipcbiAgICogSW4gV2luZG93cywgaW1wb3J0KCkgZG9lc24ndCB3b3JrIHdpdGhvdXQgZmlsZTovLyBwcm90b2NvbC5cbiAgICogU28sIHdlIG5lZWQgdG8gY29udmVydCBwYXRoIHRvIGZpbGU6Ly8gcHJvdG9jb2wuICh1cmwucGF0aFRvRmlsZVVSTClcbiAgICovXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgcmV0dXJuIGltcG9ydCh3aXRoQ2FjaGVCdXJzdChwYXRoVG9GaWxlVVJMKG1hbmlmZXN0RmlsZSkuaHJlZikpO1xuICB9XG4gIHJldHVybiBpbXBvcnQod2l0aENhY2hlQnVyc3QobWFuaWZlc3RGaWxlKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlTWFuaWZlc3RQbHVnaW4oY29uZmlnOiB7IG91dERpcjogc3RyaW5nIH0pOiBQbHVnaW5PcHRpb24ge1xuICBmdW5jdGlvbiBtYWtlTWFuaWZlc3QobWFuaWZlc3Q6IGNocm9tZS5ydW50aW1lLk1hbmlmZXN0VjMsIHRvOiBzdHJpbmcpIHtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmModG8pKSB7XG4gICAgICBmcy5ta2RpclN5bmModG8pO1xuICAgIH1cbiAgICBjb25zdCBtYW5pZmVzdFBhdGggPSByZXNvbHZlKHRvLCAnbWFuaWZlc3QuanNvbicpO1xuXG4gICAgY29uc3QgaXNGaXJlZm94ID0gcHJvY2Vzcy5lbnYuX19GSVJFRk9YX18gPT09ICd0cnVlJztcbiAgICBmcy53cml0ZUZpbGVTeW5jKG1hbmlmZXN0UGF0aCwgTWFuaWZlc3RQYXJzZXIuY29udmVydE1hbmlmZXN0VG9TdHJpbmcobWFuaWZlc3QsIGlzRmlyZWZveCA/ICdmaXJlZm94JyA6ICdjaHJvbWUnKSk7XG5cbiAgICBjb2xvckxvZyhgTWFuaWZlc3QgZmlsZSBjb3B5IGNvbXBsZXRlOiAke21hbmlmZXN0UGF0aH1gLCAnc3VjY2VzcycpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnbWFrZS1tYW5pZmVzdCcsXG4gICAgYnVpbGRTdGFydCgpIHtcbiAgICAgIHRoaXMuYWRkV2F0Y2hGaWxlKG1hbmlmZXN0RmlsZSk7XG4gICAgfSxcbiAgICBhc3luYyB3cml0ZUJ1bmRsZSgpIHtcbiAgICAgIGNvbnN0IG91dERpciA9IGNvbmZpZy5vdXREaXI7XG4gICAgICBjb25zdCBtYW5pZmVzdCA9IGF3YWl0IGdldE1hbmlmZXN0V2l0aENhY2hlQnVyc3QoKTtcbiAgICAgIG1ha2VNYW5pZmVzdChtYW5pZmVzdC5kZWZhdWx0LCBvdXREaXIpO1xuICAgIH0sXG4gIH07XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWtXLFNBQVMsb0JBQW9CO0FBQy9YLFNBQVMsV0FBQUEsZ0JBQWU7QUFDeEIsT0FBTyxxQkFBcUI7OztBQ0ZnWSxZQUFZLFFBQVE7QUFDaGIsWUFBWSxVQUFVO0FBQ3RCLFNBQVMsZ0JBQWdCLGdCQUFnQjtBQUV6QyxTQUFTLHFCQUFxQjtBQUM5QixZQUFZLGFBQWE7QUFMekIsSUFBTSxtQ0FBbUM7QUFPekMsSUFBTSxFQUFFLFFBQVEsSUFBSTtBQUVwQixJQUFNLFVBQVUsUUFBUSxrQ0FBVyxNQUFNLElBQUk7QUFDN0MsSUFBTSxlQUFlLFFBQVEsU0FBUyxhQUFhO0FBRW5ELElBQU0sNEJBQTRCLE1BQXVEO0FBQ3ZGLFFBQU0saUJBQWlCLENBQUNDLFVBQWlCLEdBQUdBLEtBQUksSUFBSSxLQUFLLElBQUksRUFBRSxTQUFTLENBQUM7QUFLekUsTUFBWSxxQkFBYSxTQUFTO0FBQ2hDLFdBQU8sT0FBTyxlQUFlLGNBQWMsWUFBWSxFQUFFLElBQUk7QUFBQSxFQUMvRDtBQUNBLFNBQU8sT0FBTyxlQUFlLFlBQVk7QUFDM0M7QUFFZSxTQUFSLG1CQUFvQyxRQUEwQztBQUNuRixXQUFTLGFBQWEsVUFBcUMsSUFBWTtBQUNyRSxRQUFJLENBQUksY0FBVyxFQUFFLEdBQUc7QUFDdEIsTUFBRyxhQUFVLEVBQUU7QUFBQSxJQUNqQjtBQUNBLFVBQU0sZUFBZSxRQUFRLElBQUksZUFBZTtBQUVoRCxVQUFNLFlBQW9CLFlBQUksZ0JBQWdCO0FBQzlDLElBQUcsaUJBQWMsY0FBYyxlQUFlLHdCQUF3QixVQUFVLFlBQVksWUFBWSxRQUFRLENBQUM7QUFFakgsYUFBUyxnQ0FBZ0MsWUFBWSxJQUFJLFNBQVM7QUFBQSxFQUNwRTtBQUVBLFNBQU87QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLGFBQWE7QUFDWCxXQUFLLGFBQWEsWUFBWTtBQUFBLElBQ2hDO0FBQUEsSUFDQSxNQUFNLGNBQWM7QUFDbEIsWUFBTUMsVUFBUyxPQUFPO0FBQ3RCLFlBQU0sV0FBVyxNQUFNLDBCQUEwQjtBQUNqRCxtQkFBYSxTQUFTLFNBQVNBLE9BQU07QUFBQSxJQUN2QztBQUFBLEVBQ0Y7QUFDRjs7O0FENUNBLFNBQVMsbUJBQW1CLDBCQUEwQjtBQUN0RCxTQUFTLE9BQU8sY0FBYyxtQkFBbUI7QUFMakQsSUFBTUMsb0NBQW1DO0FBT3pDLElBQU1DLFdBQVVDLFNBQVFDLGlDQUFTO0FBRWpDLElBQU0sU0FBU0QsU0FBUUQsVUFBUyxNQUFNLE1BQU0sTUFBTTtBQUNsRCxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMzQixTQUFTO0FBQUEsSUFDUixPQUFPLENBQ1A7QUFBQSxFQUNEO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUixnQkFBZ0I7QUFBQSxNQUNmLFlBQVk7QUFBQSxJQUNiLENBQUM7QUFBQSxJQUNELGtCQUFrQjtBQUFBLElBQ2xCLG1CQUFtQixFQUFFLE9BQU8sQ0FBQztBQUFBLElBQzdCLFNBQVMsbUJBQW1CLEVBQUUsUUFBUSxLQUFLLENBQUM7QUFBQSxFQUM3QztBQUFBLEVBQ0EsV0FBV0MsU0FBUUQsVUFBUyxRQUFRO0FBQUEsRUFDcEMsT0FBTztBQUFBLElBQ04sYUFBYTtBQUFBLElBQ2IsS0FBSztBQUFBLE1BQ0osT0FBTztBQUFBLFFBQ05DLFNBQVFDLG1DQUFXLG1CQUFtQjtBQUFBLFFBQ3RDRCxTQUFRQyxtQ0FBVyw2QkFBNkI7QUFBQSxRQUNoREQsU0FBUUMsbUNBQVcsNEJBQTRCO0FBQUEsTUFDaEQ7QUFBQSxJQUNEO0FBQUEsSUFDQTtBQUFBLElBQ0EsYUFBYTtBQUFBLElBQ2IsV0FBVztBQUFBLElBQ1gsUUFBUTtBQUFBLElBQ1Isc0JBQXNCO0FBQUEsSUFDdEIsT0FBTztBQUFBLElBQ1AsZUFBZTtBQUFBLE1BQ2QsVUFBVSxDQUFDLFFBQVE7QUFBQSxJQUNwQjtBQUFBLEVBQ0Q7QUFDRCxDQUFDOyIsCiAgIm5hbWVzIjogWyJyZXNvbHZlIiwgInBhdGgiLCAib3V0RGlyIiwgIl9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lIiwgInJvb3REaXIiLCAicmVzb2x2ZSIsICJfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSJdCn0K
